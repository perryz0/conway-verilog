module userInput (clk, reset, L, R, LEDR, HEX0);
	input logic clk, reset;
	input logic L, R;
	input logic [9:0] LEDR;
	output logic [6:0] HEX0;
//	logic Ledge, Redge;
//	
//	assign Ledge = LEDR[9];
//	assign Redge = LEDR[1];
	
	
	// State variables (only 2 needed states)
	enum { gameon, leftW, rightW } ps, ns;

	// Next state logic
	always_comb begin
		case (ps)
			gameon: 		if (LEDR[9]&L&~R)						ns = leftW;
							else if (LEDR[1]&R&~L)				ns = rightW;
							else										ns = gameon;
							
			leftW:		ns = leftW;
			rightW:		ns = rightW;
		endcase
		
//		// winner display, DK WHICH ONE IS MORE EFFICIENT
//		if (leftW == ns)
//			HEX0 = ~7'b1011011;
//		else if (rightW == ns)
//			HEX0 = ~7'b0000110;
//		else
//			HEX0 = 7'b1111111;
	end

	// Output seg7 logic
	always_comb begin
		case (ns)
			leftW:		HEX0 = ~7'b1011011;
			rightW:		HEX0 = ~7'b0000110;
			gameon:		HEX0 = 7'b1111111;
		endcase
	end
	
	// Sequential logic (DFFs)
	always_ff @(posedge clk) begin
		if (reset)
			ps <= gameon;
		else
			ps <= ns;
	end
	
endmodule 
