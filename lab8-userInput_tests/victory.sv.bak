module victory (Clock, Reset, L, R, NL, NR, lightOn);
	input logic Clock, Reset;
	// L is true when left key is pressed, R is true when the right key
	// is pressed, NL is true when the light on the left is on, and NR
	// is true when the light on the right is on.
	input logic L, R, NL, NR;
	// when lightOn is true, the normal light should be on.
	output logic lightOn;
	
	
	// State variables (only 2 needed states)
	enum { on, off } ps, ns;

	// Next state logic
	always_comb begin
		case (ps)
			on: 		if ((R & ~L) | (L & ~R))			ns = off;	// xor for when L & R clicked simultaneously
						else										ns = on;
							
			off: 		if ((NR&L&~R) | (NL&R&~L))			ns = on;
						else										ns = off;
		endcase
	end

	// Output LED logic
	always_comb begin
		case (ps)
			on:		lightOn = 1;
			off:		lightOn = 0;
		endcase
	end
	
	// Sequential logic (DFFs)
	always_ff @(posedge clk) begin
		if (reset)
			ps <= off;
		else
			ps <= ns;
	end
	
endmodule 
