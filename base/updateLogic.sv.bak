module updateLogic (
   input logic clk,
   input logic [15:0][15:0] grid,
   output logic [15:0][15:0] grid_next
);
   function logic cell_next_state(logic [2:0] num_neighbors, logic current_state);
      if (current_state == 1) begin
         if (num_neighbors < 2 || num_neighbors > 3) begin
            return 0;
         end else begin
            return 1;
         end
      end else begin
         if (num_neighbors == 3) begin
            return 1;
         end else begin
            return 0;
         end
      end
   endfunction

   always_ff @(posedge clk) begin
      for (int row = 0; row < 16; row++) begin
         for (int col = 0; col < 16; col++) begin
            logic [2:0] num_neighbors = 0;
            for (int i = -1; i <= 1; i++) begin
               for (int j = -1; j <= 1; j++) begin
                  if (i != 0 || j != 0) begin
                     int neighbor_row = row + i;
                     int neighbor_col = col + j;
                     if (neighbor_row >= 0 && neighbor_row < 16 && neighbor_col >= 0 && neighbor_col < 16) begin
                        num_neighbors += grid[neighbor_row][neighbor_col];
                     end
                  end
               end
            end
            grid_next[row][col] = cell_next_state(num_neighbors, grid[row][col]);
         end
      end
   end
endmodule
